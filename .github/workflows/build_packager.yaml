name: Build & Test

on: [push]
jobs:
  build-test-linux:
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.4.0.2170
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: rospkgmanager
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.20.x'
    - uses: actions/checkout@v2
      with:
        repository: Railway-Op-Sim/rostools
        ref: v0.4.0
        path: rostools
    - name: Install ROSTools
      run: |
        cmake -Bbuild
        sudo cmake --build build/ --target install
      working-directory: rostools/cpp
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with: 
        version: '5.15.2'
        arch: 'win64_mingw81'
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
    - name: Run build-wrapper
      run: |
        cmake -Bbuild
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build
      working-directory: rospkgmanager
    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
    - uses: actions/upload-artifact@v1
      with:
          name: unix_rospkg
          path: rospkgmanager/build/ROSPkgManager
  build-test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        path: rospkgmanager
    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.20.x'
    - uses: actions/checkout@v2
      with:
        repository: Railway-Op-Sim/rostools
        ref: v0.4.0
        path: rostools
    - name: Install ZLIB
      run: powershell -Command "(Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat)"; ./install_zlib.bat; del install_zlib.bat
    - name: Install ROSTools
      run: |
        mkdir install
        cmake -Bbuild
        cmake --build build/ --target install
      working-directory: rostools/cpp
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with: 
        version: '5.15.2'
    - name: Build ROSPackageManager   
      run: |
            cmake -Bbuild
            cmake --build build
      working-directory: rospkgmanager
    - uses: actions/upload-artifact@v1
      with:
          name: win_rospkg
          path: rospkgmanager/build/ROSPkgManager.exe
